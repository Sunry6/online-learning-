/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './pages/__root'
import { Route as FrontRouteImport } from './pages/front/route'
import { Route as FrontChapterSystemImport } from './pages/front/chapter/system'
import { Route as FrontChapterProjectImport } from './pages/front/chapter/project'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()
const FrontAboutLazyImport = createFileRoute('/front/about')()

// Create/Update Routes

const FrontRouteRoute = FrontRouteImport.update({
  id: '/front',
  path: '/front',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./pages/index.lazy').then((d) => d.Route))

const FrontAboutLazyRoute = FrontAboutLazyImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => FrontRouteRoute,
} as any).lazy(() => import('./pages/front/about.lazy').then((d) => d.Route))

const FrontChapterSystemRoute = FrontChapterSystemImport.update({
  id: '/chapter/system',
  path: '/chapter/system',
  getParentRoute: () => FrontRouteRoute,
} as any)

const FrontChapterProjectRoute = FrontChapterProjectImport.update({
  id: '/chapter/project',
  path: '/chapter/project',
  getParentRoute: () => FrontRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/front': {
      id: '/front'
      path: '/front'
      fullPath: '/front'
      preLoaderRoute: typeof FrontRouteImport
      parentRoute: typeof rootRoute
    }
    '/front/about': {
      id: '/front/about'
      path: '/about'
      fullPath: '/front/about'
      preLoaderRoute: typeof FrontAboutLazyImport
      parentRoute: typeof FrontRouteImport
    }
    '/front/chapter/project': {
      id: '/front/chapter/project'
      path: '/chapter/project'
      fullPath: '/front/chapter/project'
      preLoaderRoute: typeof FrontChapterProjectImport
      parentRoute: typeof FrontRouteImport
    }
    '/front/chapter/system': {
      id: '/front/chapter/system'
      path: '/chapter/system'
      fullPath: '/front/chapter/system'
      preLoaderRoute: typeof FrontChapterSystemImport
      parentRoute: typeof FrontRouteImport
    }
  }
}

// Create and export the route tree

interface FrontRouteRouteChildren {
  FrontAboutLazyRoute: typeof FrontAboutLazyRoute
  FrontChapterProjectRoute: typeof FrontChapterProjectRoute
  FrontChapterSystemRoute: typeof FrontChapterSystemRoute
}

const FrontRouteRouteChildren: FrontRouteRouteChildren = {
  FrontAboutLazyRoute: FrontAboutLazyRoute,
  FrontChapterProjectRoute: FrontChapterProjectRoute,
  FrontChapterSystemRoute: FrontChapterSystemRoute,
}

const FrontRouteRouteWithChildren = FrontRouteRoute._addFileChildren(
  FrontRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/front': typeof FrontRouteRouteWithChildren
  '/front/about': typeof FrontAboutLazyRoute
  '/front/chapter/project': typeof FrontChapterProjectRoute
  '/front/chapter/system': typeof FrontChapterSystemRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/front': typeof FrontRouteRouteWithChildren
  '/front/about': typeof FrontAboutLazyRoute
  '/front/chapter/project': typeof FrontChapterProjectRoute
  '/front/chapter/system': typeof FrontChapterSystemRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/front': typeof FrontRouteRouteWithChildren
  '/front/about': typeof FrontAboutLazyRoute
  '/front/chapter/project': typeof FrontChapterProjectRoute
  '/front/chapter/system': typeof FrontChapterSystemRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/front'
    | '/front/about'
    | '/front/chapter/project'
    | '/front/chapter/system'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/front'
    | '/front/about'
    | '/front/chapter/project'
    | '/front/chapter/system'
  id:
    | '__root__'
    | '/'
    | '/front'
    | '/front/about'
    | '/front/chapter/project'
    | '/front/chapter/system'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  FrontRouteRoute: typeof FrontRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  FrontRouteRoute: FrontRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/front"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/front": {
      "filePath": "front/route.tsx",
      "children": [
        "/front/about",
        "/front/chapter/project",
        "/front/chapter/system"
      ]
    },
    "/front/about": {
      "filePath": "front/about.lazy.tsx",
      "parent": "/front"
    },
    "/front/chapter/project": {
      "filePath": "front/chapter/project.tsx",
      "parent": "/front"
    },
    "/front/chapter/system": {
      "filePath": "front/chapter/system.tsx",
      "parent": "/front"
    }
  }
}
ROUTE_MANIFEST_END */
